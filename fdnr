#!/bin/bash

## compiler: ssc-0.0.1-b4
## host: Darwin YupyeSortaco.local 24.0.0 Darwin Kernel Version 24.0.0: Mon Aug 12 21:27:51 PDT 2024; root:xnu-11215.1.10~5/RELEASE_ARM64_T8112 arm64 arm Darwin
## date: 20240901T131850Z

#!/bin/bash

## include >>>
Slibs_PrintJudgement_AnswerNo () 
{ 
    Slibs_PrintJudgement_Base;
    echo $slibs_printJudgement_answerNo
}
Slibs_PrintJudgement_AnswerYes () 
{ 
    Slibs_PrintJudgement_Base;
    echo $slibs_printJudgement_answerYes
}
Slibs_PrintJudgement_Architecture () 
{ 
    Slibs_PrintJudgement_Base;
    Slibs_PrintJudgement_SentenceBeginning;
    echo -n "the architecture of this host is $1";
    Slibs_PrintJudgement_SentenceEnding
}
Slibs_PrintJudgement_Base () 
{ 
    export slibs_printJudgement_sentenceBeginning="Checking whether ";
    export slibs_printJudgement_sentenceEnding="... ";
    export slibs_printJudgement_answerYes="yes";
    export slibs_printJudgement_answerNo="no"
}
Slibs_PrintJudgement_Existence () 
{ 
    Slibs_PrintJudgement_Base;
    Slibs_PrintJudgement_SentenceBeginning;
    echo -n "$1 exists";
    Slibs_PrintJudgement_SentenceEnding
}
Slibs_PrintJudgement_Os () 
{ 
    Slibs_PrintJudgement_Base;
    Slibs_PrintJudgement_SentenceBeginning;
    echo -n "the OS on this host is $1";
    Slibs_PrintJudgement_SentenceEnding
}
Slibs_PrintJudgement_SentenceBeginning () 
{ 
    Slibs_PrintJudgement_Base;
    echo -n "$slibs_printJudgement_sentenceBeginning"
}
Slibs_PrintJudgement_SentenceEnding () 
{ 
    Slibs_PrintJudgement_Base;
    echo -n "$slibs_printJudgement_sentenceEnding"
}
Slibs_PrintJudgement_Version () 
{ 
    Slibs_PrintJudgement_Base;
    Slibs_PrintJudgement_SentenceBeginning;
    [ -z "$2" ] && echo -n "the version is $1";
    [ -n "$2" ] && echo -n "the version of $1 is $2";
    Slibs_PrintJudgement_SentenceEnding
}
Slibs_PrintMessage () 
{ 
    echo -n "$1: ";
    [[ "$2" = d* ]] && echo -en "\e[1m\e[037mdebug: \e[0m";
    [[ "$2" = i* ]] && echo -en "\e[1m\e[092minfo: \e[0m";
    [[ "$2" = w* ]] && echo -en "\e[1m\e[093mwarning: \e[0m";
    [[ "$2" = e* ]] && echo -en "\e[1m\e[091merror: \e[0m";
    [[ "$2" = f* ]] && echo -en "\e[1m\e[031mfafal: \e[0m";
    echo "$3"
}
Slibs_PrintMessage_Debug () 
{ 
    Slibs_PrintMessage "$1" d "$2"
}
Slibs_PrintMessage_Error () 
{ 
    Slibs_PrintMessage "$1" e "$2"
}
Slibs_PrintMessage_Fafal () 
{ 
    Slibs_PrintMessage "$1" f "$2"
}
Slibs_PrintMessage_Fafal_InvalidExtensionName () 
{ 
    Slibs_PrintMessage_Fafal "$1" "Invalid extension name in \`$2'."
}
Slibs_PrintMessage_Fafal_ItemExists () 
{ 
    Slibs_PrintMessage_Fafal "$1" "\`$2' exists."
}
Slibs_PrintMessage_Fafal_ItemNotFound () 
{ 
    Slibs_PrintMessage_Fafal "$1" "\`$2' not found."
}
Slibs_PrintMessage_Fafal_SourceExpected () 
{ 
    Slibs_PrintMessage_Fafal "$1" "Source expected."
}
Slibs_PrintMessage_Fafal_TargetExpected () 
{ 
    Slibs_PrintMessage_Fafal "$1" "Target expected."
}
Slibs_PrintMessage_Fafal_TooManyArguments () 
{ 
    Slibs_PrintMessage_Fafal "$1" "To many arguments."
}
Slibs_PrintMessage_Info () 
{ 
    Slibs_PrintMessage "$1" i "$2"
}
Slibs_PrintMessage_Warning () 
{ 
    Slibs_PrintMessage "$1" w "$2"
}
Ssc_WriteCompilationInformation () 
{ 
    echo "$ssc_compilationInfo" >> "$ssc_target"
}
## <<<


export DOTNET_ROOT=$HOME/.dotnet
export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/tools

function CheckCommandLineTool() {
    Slibs_PrintJudgement_Existence "$2"
    if [ -f "$(which "$2")" ]; then
        Slibs_PrintJudgement_AnswerYes
    else
        Slibs_PrintJudgement_AnswerNo
        Slibs_PrintMessage_Fafal_ItemNotFound "$1" "$2"
        echo "Install the latest $2 for $OS_TYPE."
        exit 1
    fi
}

function DownloadDotnet() {
    if wget https://dot.net/v1/dotnet-install.sh; then
        if ! bash dotnet-install.sh "$1"; then
            echo "Error: Cannot install .NET $1 for $OS_TYPE."
            exit 1
        fi
    else
        echo "Error: Cannot download dotnet-install scripts."
        echo "You should check the network connection or use a proxy."
        exit 1
    fi
}

function CheckDotnetRuntime() {
    echo -n "Checking whether .NET Runtime '$1' 8.0 for $OS_TYPE has been installed... "
    if dotnet --list-runtimes | grep "$1 8.0." &> /dev/null; then
        echo "yes"
    else
        echo "no"
        DownloadDotnet "Runtime 8.0.0" "--runtime dotnet --version 8.0.0"
    fi
}

if true; then

    # To enter ~/.fdnr
    export FORMER_DIRECTORY="$PWD"
    mkdir -p ~/.fdnr
    cd ~/.fdnr || exit 1

    # To check $ARCH
    if [ -n "$ARCH" ]; then
        if [ ! "$ARCH" = "x86" ];then
            if [ ! "$ARCH" = "x64" ]; then
                if [ ! "$ARCH" = "arm64" ]; then
                    echo "Error: $ARCH is not an available architecture."
                    exit 1
                fi
            fi
        fi
    else
        export ARCH=x64
    fi

    # To check OS type
    echo -n "Checking OS type... "
    if [ ! -e /System ]; then
        export OS_TYPE="GNU/Linux"
    else
        export OS_TYPE="Darwin (macOS)"
    fi
    echo "$OS_TYPE"

    # To Set environment variables
    export PATH="/usr/bin:/bin:/usr/sbin:/sbin:$PATH"

    # To Check Git and Wget
    CheckCommandLineTool "$0" git
    CheckCommandLineTool "$0" wget

    # To check .NET SDK 8.0 for $OS_TYPE
    echo -n "Checking whether .NET SDK 8.0 for $OS_TYPE has been installed... "
    if dotnet --list-sdks | grep "8.0." &> /dev/null; then
        echo "yes"
    else
        echo "no"
        DownloadDotnet "SDK 8.0" "--channel 8.0"
    fi

    # To check .NET Runtime 8.0 for $OS_TYPE
    CheckDotnetRuntime Microsoft.AspNetCore.App
    CheckDotnetRuntime Microsoft.NETCore.App

    # To clone repository
    echo -n "Checking whether repository has been cloned... "
    if [ -d FishDeskNextReborn ]; then
        echo "yes"
    else
        echo "no"
        echo "Cloning 'https://github.com/liziyu0714/FishDeskNextReborn.git'..."
        rm -rf FishDeskNextReborn
        if ! git clone https://github.com/liziyu0714/FishDeskNextReborn.git; then
            echo "Error: Cannot clone repository 'https://github.com/liziyu0714/FishDeskNextReborn.git'."
            echo "You should check the network connection or use a proxy."
            exit 1
        fi
    fi

    # To build project
    cd FishDeskNextReborn || exit 1
    if ! dotnet publish --arch "$ARCH" --os win --framework net8.0-windows; then
        echo "Error: Cannot publish the project."
        echo "You should wait for a while and operate 'dotnet publish --arch x64 --os win' again."
        exit 1
    fi
    echo "Successfully published the project."
    echo "Go to '~/.fdnr/FishDeskNextReborn/src/FishDeskNextReborn/bin/Release/net8.0-windows/win-x64/' to check the products."
    echo "Now you can copy the directory above to your Windows platform."
    echo "Thank you for using this script â˜† Kira~"
    cd "$FORMER_DIRECTORY" || exit 1

fi